#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace booproject_v2.App_Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertAlbumGroup(AlbumGroup instance);
    partial void UpdateAlbumGroup(AlbumGroup instance);
    partial void DeleteAlbumGroup(AlbumGroup instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Album> Albums
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<AlbumGroup> AlbumGroups
		{
			get
			{
				return this.GetTable<AlbumGroup>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Everything> Everythings
		{
			get
			{
				return this.GetTable<Everything>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _albumid;
		
		private string _genre;
		
		private System.Nullable<int> _release;
		
		private System.Nullable<int> _tracksamount;
		
		private EntitySet<AlbumGroup> _AlbumGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalbumidChanging(string value);
    partial void OnalbumidChanged();
    partial void OngenreChanging(string value);
    partial void OngenreChanged();
    partial void OnreleaseChanging(System.Nullable<int> value);
    partial void OnreleaseChanged();
    partial void OntracksamountChanging(System.Nullable<int> value);
    partial void OntracksamountChanged();
    #endregion
		
		public Album()
		{
			this._AlbumGroups = new EntitySet<AlbumGroup>(new Action<AlbumGroup>(this.attach_AlbumGroups), new Action<AlbumGroup>(this.detach_AlbumGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albumid", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string albumid
		{
			get
			{
				return this._albumid;
			}
			set
			{
				if ((this._albumid != value))
				{
					this.OnalbumidChanging(value);
					this.SendPropertyChanging();
					this._albumid = value;
					this.SendPropertyChanged("albumid");
					this.OnalbumidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genre", DbType="NChar(10)")]
		public string genre
		{
			get
			{
				return this._genre;
			}
			set
			{
				if ((this._genre != value))
				{
					this.OngenreChanging(value);
					this.SendPropertyChanging();
					this._genre = value;
					this.SendPropertyChanged("genre");
					this.OngenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_release", DbType="Int")]
		public System.Nullable<int> release
		{
			get
			{
				return this._release;
			}
			set
			{
				if ((this._release != value))
				{
					this.OnreleaseChanging(value);
					this.SendPropertyChanging();
					this._release = value;
					this.SendPropertyChanged("release");
					this.OnreleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tracksamount", DbType="Int")]
		public System.Nullable<int> tracksamount
		{
			get
			{
				return this._tracksamount;
			}
			set
			{
				if ((this._tracksamount != value))
				{
					this.OntracksamountChanging(value);
					this.SendPropertyChanging();
					this._tracksamount = value;
					this.SendPropertyChanged("tracksamount");
					this.OntracksamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_AlbumGroup", Storage="_AlbumGroups", ThisKey="albumid", OtherKey="albumid")]
		public EntitySet<AlbumGroup> AlbumGroups
		{
			get
			{
				return this._AlbumGroups;
			}
			set
			{
				this._AlbumGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumGroups(AlbumGroup entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_AlbumGroups(AlbumGroup entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlbumGroup")]
	public partial class AlbumGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _albumid;
		
		private string _groupid;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalbumidChanging(string value);
    partial void OnalbumidChanged();
    partial void OngroupidChanging(string value);
    partial void OngroupidChanged();
    #endregion
		
		public AlbumGroup()
		{
			this._Album = default(EntityRef<Album>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albumid", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string albumid
		{
			get
			{
				return this._albumid;
			}
			set
			{
				if ((this._albumid != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalbumidChanging(value);
					this.SendPropertyChanging();
					this._albumid = value;
					this.SendPropertyChanged("albumid");
					this.OnalbumidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupid", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string groupid
		{
			get
			{
				return this._groupid;
			}
			set
			{
				if ((this._groupid != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupidChanging(value);
					this.SendPropertyChanging();
					this._groupid = value;
					this.SendPropertyChanged("groupid");
					this.OngroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_AlbumGroup", Storage="_Album", ThisKey="albumid", OtherKey="albumid", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.AlbumGroups.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.AlbumGroups.Add(this);
						this._albumid = value.albumid;
					}
					else
					{
						this._albumid = default(string);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_AlbumGroup", Storage="_Group", ThisKey="groupid", OtherKey="groupid", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.AlbumGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.AlbumGroups.Add(this);
						this._groupid = value.groupid;
					}
					else
					{
						this._groupid = default(string);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _groupid;
		
		private System.Nullable<int> _members;
		
		private EntitySet<AlbumGroup> _AlbumGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngroupidChanging(string value);
    partial void OngroupidChanged();
    partial void OnmembersChanging(System.Nullable<int> value);
    partial void OnmembersChanged();
    #endregion
		
		public Group()
		{
			this._AlbumGroups = new EntitySet<AlbumGroup>(new Action<AlbumGroup>(this.attach_AlbumGroups), new Action<AlbumGroup>(this.detach_AlbumGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupid", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string groupid
		{
			get
			{
				return this._groupid;
			}
			set
			{
				if ((this._groupid != value))
				{
					this.OngroupidChanging(value);
					this.SendPropertyChanging();
					this._groupid = value;
					this.SendPropertyChanged("groupid");
					this.OngroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_members", DbType="Int")]
		public System.Nullable<int> members
		{
			get
			{
				return this._members;
			}
			set
			{
				if ((this._members != value))
				{
					this.OnmembersChanging(value);
					this.SendPropertyChanging();
					this._members = value;
					this.SendPropertyChanged("members");
					this.OnmembersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_AlbumGroup", Storage="_AlbumGroups", ThisKey="groupid", OtherKey="groupid")]
		public EntitySet<AlbumGroup> AlbumGroups
		{
			get
			{
				return this._AlbumGroups;
			}
			set
			{
				this._AlbumGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumGroups(AlbumGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_AlbumGroups(AlbumGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Everything")]
	public partial class Everything
	{
		
		private string _groupid;
		
		private System.Nullable<int> _members;
		
		private string _albumid;
		
		private System.Nullable<int> _release;
		
		private string _genre;
		
		private System.Nullable<int> _tracksamount;
		
		public Everything()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupid", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string groupid
		{
			get
			{
				return this._groupid;
			}
			set
			{
				if ((this._groupid != value))
				{
					this._groupid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_members", DbType="Int")]
		public System.Nullable<int> members
		{
			get
			{
				return this._members;
			}
			set
			{
				if ((this._members != value))
				{
					this._members = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albumid", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string albumid
		{
			get
			{
				return this._albumid;
			}
			set
			{
				if ((this._albumid != value))
				{
					this._albumid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_release", DbType="Int")]
		public System.Nullable<int> release
		{
			get
			{
				return this._release;
			}
			set
			{
				if ((this._release != value))
				{
					this._release = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genre", DbType="NChar(10)")]
		public string genre
		{
			get
			{
				return this._genre;
			}
			set
			{
				if ((this._genre != value))
				{
					this._genre = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tracksamount", DbType="Int")]
		public System.Nullable<int> tracksamount
		{
			get
			{
				return this._tracksamount;
			}
			set
			{
				if ((this._tracksamount != value))
				{
					this._tracksamount = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
